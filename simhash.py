import hashlib
from parser_utils import tokenize

class SimHash:
    def __init__(self, b=64):
        self.b = b  # Number of bits in the fingerprint

    def _hash_word(self, word):
        encoded_word = word.encode('utf-8') # Encode the word into bytes using UTF-8 encoding
        md5_hash = hashlib.md5()            # Create an MD5 hash object
        md5_hash.update(encoded_word)       # Update the hash object with the encoded word
        hex_digest = md5_hash.hexdigest()   # Get the hexadecimal digest of the hash
        hash_value = int(hex_digest, 16)    # Convert the hexadecimal digest to an integer with base 16
        return bin(hash_value)[2:].zfill(self.b)[-self.b:]  # Convert hash value to binary and ensure it is b bits long

    def _calculate_frequencies(self, tokens):
        # Calculate word frequencies
        freq = {}
        for token in tokens:
            if token in freq:
                freq[token] += 1
            else:
                freq[token] = 1
        return freq


    def compute_simhash(self, text):
        tokens = tokenize(text)
        frequencies = self._calculate_frequencies(tokens)
        
        V = [0] * self.b
        
        for word, weight in frequencies.items():
            hash_value = self._hash_word(word)
            for i in range(self.b):
                if hash_value[i] == '1':
                    V[i] += weight
                else:
                    V[i] -= weight
        
        fingerprint = ''.join(['1' if v > 0 else '0' for v in V])
        return fingerprint

    def hamming_distance(self, hash1, hash2):
        # Calculate the Hamming distance between two hashes
        return sum(c1 != c2 for c1, c2 in zip(hash1, hash2))

    def similarity(self, text1, text2):
        hash1 = self.compute_simhash(text1)
        hash2 = self.compute_simhash(text2)
        distance = self.hamming_distance(hash1, hash2)
        return 1 - distance / self.b

    def are_near_duplicates(self, text1, text2, threshold=0.8):
        return self.similarity(text1, text2) >= threshold

# ioannis
# 1111110001010111001010100100011100010000010110101011000011100111
# [1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1]
# panageas
# 0011101010111001011010110001101000100001010010010001100100000101
# [0, 0, 2, 2, 2, 0, 0, -2, 0, 0, 0, 2, 0, 0, 0, 2, -2, 0, 2, -2, 2, -2, 2, 0, -2, 0, -2, 0, 0, 0, 2, 0, -2, -2, 0, 0, -2, -2, -2, 0, -2, 2, -2, 0, 2, -2, 0, 0, 0, -2, 0, 2, 0, -2, -2, 0, 0, 0, 0, -2, -2, 2, 0, 2]
# assistant
# 0101010101000001101101001010111000110000100010010100111011101010
# [-1, 1, 1, 3, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 3, -1, -1, 3, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 3, -1, -3, -3, 1, 1, -3, -3, -3, -1, -1, 1, -3, -1, 3, -3, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -3, -1, 1, 1, 1]
# professor
# 1110100110011101110111011011001111010000010111011010001111000101
# [0, 2, 2, 2, 2, 0, -2, 0, 0, 0, -2, 2, 0, 0, -2, 4, 0, 0, 2, 0, 2, 0, 0, 0, 0, -2, 0, 0, 0, 0, 4, 0, -2, -2, 0, 2, -4, -4, -4, -2, -2, 2, -4, 0, 4, -2, -2, 2, 0, -2, 0, 0, 0, -2, 0, 0, 2, 2, 0, -4, -2, 2, 0, 2]
# donald
# 1000001111001000000001000010001101010000000001011001111101010110
# [1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -3, 1, 1, -1, -3, 3, -1, -1, 1, -1, 1, 1, -1, -1, -1, -3, 1, -1, -1, -1, 5, 1, -3, -1, -1, 3, -5, -5, -5, -3, -3, 1, -5, -1, 3, -1, -3, 3, 1, -3, -1, 1, 1, -1, 1, 1, 1, 3, -1, -3, -3, 3, 1, 1]
# bren
# 1100011110110101001001111101100011100001101001000000110000100011
# [2, 2, 0, 0, 0, 0, 0, 2, 2, 0, -2, 2, 0, 0, -4, 4, -2, -2, 2, -2, 0, 2, 0, 0, 0, -2, 0, 0, 0, -2, 4, 0, -2, 0, 0, 2, -6, -6, -6, -2, -2, 0, -4, -2, 2, 0, -4, 2, 0, -4, -2, 0, 2, 0, 0, 0, 0, 2, 0, -4, -4, 2, 2, 2]
# school
# 0000001001001000011000101001110011111111010111100100100110001100
# [1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -3, 1, 1, -1, -5, 3, -3, -1, 3, -3, -1, 1, 1, -1, 1, -3, -1, 1, 1, -1, 3, -1, -1, 1, 1, 3, -5, -5, -5, -1, -3, 1, -5, -1, 3, 1, -3, 1, -1, -3, -3, -1, 3, -1, -1, 1, 1, 1, -1, -5, -3, 3, 1, 1]
# information
# 1000110111101101000111011010110010010000010000000101010010101100
# [2, 0, -2, -2, 0, 0, 0, 2, 2, 2, -2, 0, 2, 0, -6, 4, -4, -2, 2, -2, 0, 2, 0, 0, 2, -4, 0, 0, 2, 0, 2, -2, 0, 0, 0, 4, -6, -6, -6, -2, -4, 2, -6, -2, 2, 0, -4, 0, -2, -2, -4, 0, 2, 0, -2, 0, 2, 0, 0, -6, -2, 4, 0, 0]
# computer
# 0110011100001100100001010110011011101110010101000101011010001010
# [1, 1, -1, -3, -1, 1, 1, 3, 1, 1, -3, -1, 3, 1, -7, 3, -3, -3, 1, -3, -1, 3, -1, 1, 1, -3, 1, -1, 1, 1, 3, -3, 1, 1, 1, 3, -5, -5, -5, -3, -5, 3, -7, -1, 1, 1, -5, -1, -3, -1, -5, 1, 1, 1, -1, -1, 3, -1, -1, -7, -1, 3, 1, -1]
# science
# 1111001110111111111101000110011000101111000110101011001001111011
# [2, 2, 0, -2, -2, 0, 2, 4, 2, 0, -2, 0, 4, 2, -6, 4, -2, -2, 2, -2, -2, 4, -2, 0, 0, -2, 2, -2, 0, 2, 4, -4, 0, 0, 2, 2, -4, -4, -4, -2, -6, 2, -8, 0, 2, 0, -4, -2, -2, -2, -4, 2, 0, 0, 0, -2, 2, 0, 0, -6, 0, 2, 2, 0]
# university
# 1110110111000011100110011000000110000011010110111011111011001001
# [3, 3, 1, -3, -1, 1, 1, 5, 3, 1, -3, -1, 3, 1, -5, 5, -1, -3, 1, -1, -1, 3, -3, 1, 1, -3, 1, -3, -1, 1, 3, -3, 1, -1, 1, 1, -5, -5, -3, -1, -7, 3, -9, 1, 3, -1, -3, -1, -1, -3, -3, 3, 1, 1, 1, -3, 3, 1, -1, -7, 1, 1, 1, 1]
# california
# 0101110010011110011001101010110100001101100011110010100111100011
# [2, 4, 0, -2, 0, 2, 0, 4, 4, 0, -4, 0, 4, 2, -4, 4, -2, -2, 2, -2, -2, 4, -2, 0, 2, -4, 2, -4, 0, 2, 2, -2, 0, -2, 0, 0, -4, -4, -4, 0, -6, 2, -10, 0, 4, 0, -2, 0, -2, -4, -2, 2, 2, 0, 0, -2, 4, 2, 0, -8, 0, 0, 2, 2]
# irvine
# 0010101010000011010001000110111011110001001110111110010011001011
# [1, 3, 1, -3, 1, 1, 1, 3, 5, -1, -5, -1, 3, 1, -3, 5, -3, -1, 1, -3, -3, 5, -3, -1, 1, -3, 3, -5, 1, 3, 3, -3, 1, -1, 1, 1, -5, -5, -5, 1, -7, 1, -9, 1, 5, -1, -1, 1, -1, -3, -1, 1, 1, 1, -1, -3, 5, 3, -1, -9, 1, -1, 3, 3]
# director
# 1000011100100100101010100010011011101101011111110100000101110110
# [2, 2, 0, -4, 0, 2, 2, 4, 4, -2, -4, -2, 2, 2, -4, 4, -2, -2, 2, -4, -2, 4, -2, -2, 0, -4, 4, -6, 0, 4, 4, -4, 2, 0, 2, 0, -4, -4, -6, 2, -8, 2, -8, 2, 6, 0, 0, 2, -2, -2, -2, 0, 0, 0, -2, -2, 4, 4, 0, -8, 0, 0, 4, 2]
# goallab
# 0001100100001100100101111000011110001010010100011001100101110101
# [1, 1, -1, -3, 1, 1, 1, 5, 3, -3, -5, -3, 3, 3, -5, 3, -1, -3, 1, -3, -3, 5, -1, -1, 1, -5, 3, -7, -1, 5, 5, -3, 3, -1, 1, -1, -3, -5, -5, 1, -9, 3, -9, 3, 5, -1, -1, 3, -1, -3, -3, 1, 1, -1, -3, -1, 3, 5, 1, -7, -1, 1, 3, 3]